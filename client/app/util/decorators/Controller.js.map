{"version":3,"sources":["../../../app-src/util/decorators/Controller.js"],"names":["controller","seletores","elements","map","seletor","document","querySelector","constructor","constructorOriginal","constructorNovo","instance","Object","getOwnPropertyNames","prototype","forEach","property","Reflect","hasMetadata","associaEvento","getMetadata","metadado","selector","addEventListener","event","prevent","preventDefault","propertyKey"],"mappings":";;;AAAO,aAASA,UAAT,CAAoB,GAAGC,SAAvB,EAAkC;;AAGrC,cAAMC,WAAWD,UACZE,GADY,CACRC,WACDC,SAASC,aAAT,CAAuBF,OAAvB,CAFS,CAAjB;;AAIA,eAAO,UAASG,WAAT,EAAsB;;AAEzB,kBAAMC,sBAAsBD,WAA5B;AACA,kBAAME,kBAAkB,YAAW;;AAE/B;AACA,sBAAMC,WAAW,IAAIF,mBAAJ,CAAwB,GAAGN,QAA3B,CAAjB;;AAEA;AACAS,uBACKC,mBADL,CACyBJ,oBAAoBK,SAD7C,EAEKC,OAFL,CAEaC,YAAY;;AAEjB,wBAAIC,QAAQC,WAAR,CAAoB,WAApB,EAAiCP,QAAjC,EAA2CK,QAA3C,CAAJ,EAA0D;;AAEtD;AACAG,sCAAcR,QAAd,EACIM,QAAQG,WAAR,CAAoB,WAApB,EAAiCT,QAAjC,EAA2CK,QAA3C,CADJ;AAEH;AACJ,iBAVL;AAYH,aAlBD;;AAoBA;AACAN,4BAAgBI,SAAhB,GAA4BL,oBAAoBK,SAAhD;;AAEA;AACA,mBAAOJ,eAAP;AAEH,SA7BD;;AAgCA,iBAASS,aAAT,CAAuBR,QAAvB,EAAiCU,QAAjC,EAA2C;;AAEvCf,qBACKC,aADL,CACmBc,SAASC,QAD5B,EAEKC,gBAFL,CAEsBF,SAASG,KAF/B,EAEsCA,SAAS;AACvC,oBAAIH,SAASI,OAAb,EAAsBD,MAAME,cAAN;AACtBf,yBAASU,SAASM,WAAlB,EAA+BH,KAA/B;AACH,aALL;AAMH;AAGJ;;0BAlDevB,U","file":"Controller.js","sourcesContent":["export function controller(...seletores) {\n\n\n    const elements = seletores\n        .map(seletor =>\n            document.querySelector(seletor));\n\n    return function(constructor) {\n\n        const constructorOriginal = constructor;\n        const constructorNovo = function() {\n\n            // guardando uma referência para a instância\n            const instance = new constructorOriginal(...elements);\n\n            // varre cada propriedade da classe\n            Object\n                .getOwnPropertyNames(constructorOriginal.prototype)\n                .forEach(property => {\n\n                    if (Reflect.hasMetadata('bindEvent', instance, property)) {\n\n                        // precisa fazer a associação do evento com o método\n                        associaEvento(instance,\n                            Reflect.getMetadata('bindEvent', instance, property));\n                    }\n                });\n\n        }\n\n        // ajustando o prototype\n        constructorNovo.prototype = constructorOriginal.prototype;\n\n        // retornando o novo constructor\n        return constructorNovo;\n\n    }\n\n\n    function associaEvento(instance, metadado) {\n\n        document\n            .querySelector(metadado.selector)\n            .addEventListener(metadado.event, event => {\n                if (metadado.prevent) event.preventDefault();\n                instance[metadado.propertyKey](event);\n            });\n    }\n\n\n}"]}