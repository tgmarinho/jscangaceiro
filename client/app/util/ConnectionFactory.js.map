{"version":3,"sources":["../../app-src/util/ConnectionFactory.js"],"names":["stores","connection","close","ConnectionFactory","constructor","Error","getConnection","Promise","resolve","reject","openRequest","indexedDB","open","onupgradeneeded","e","_createStores","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement","closeConnection"],"mappings":";;;;;;AAAA;AACA,kBAAMA,SAAS,CAAC,cAAD,CAAf;AACA;AACA,gBAAIC,aAAa,IAAjB;AACA;AACA,gBAAIC,QAAQ,IAAZ;;AAEO,kBAAMC,iBAAN,CAAwB;;AAE3BC,8BAAc;AACV,0BAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACH;;AAED,uBAAOC,aAAP,GAAuB;AACnB,2BAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;;AAEpC,8BAAMC,cAAcC,UAAUC,IAAV,CAAe,cAAf,EAA+B,CAA/B,CAApB;;AAEA,4BAAIX,UAAJ,EAAgB,OAAOO,QAAQP,UAAR,CAAP;;AAEhBS,oCAAYG,eAAZ,GAA8BC,KAAK;;AAE/B;AACAX,8CAAkBY,aAAlB,CAAgCD,EAAEE,MAAF,CAASC,MAAzC;AAEH,yBALD;;AAOAP,oCAAYQ,SAAZ,GAAwBJ,KAAK;AACzB;AACAb,yCAAaa,EAAEE,MAAF,CAASC,MAAtB;;AAEA;AACAf,oCAAQD,WAAWC,KAAX,CAAiBiB,IAAjB,CAAsBlB,UAAtB,CAAR;;AAEAA,uCAAWC,KAAX,GAAmB,MAAM;AACrB,sCAAM,IAAIG,KAAJ,CAAU,4CAAV,CAAN;AACH,6BAFD;AAGAG,oCAAQM,EAAEE,MAAF,CAASC,MAAjB;AACH,yBAXD;;AAaAP,oCAAYU,OAAZ,GAAsBN,KAAK;AACvBO,oCAAQC,GAAR,CAAYR,EAAEE,MAAF,CAASO,KAArB;AACAd,mCAAOK,EAAEE,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,yBAHD;AAKH,qBA/BM,CAAP;AAgCH;;AAGD;AACA;AACA;AACA,uBAAOT,aAAP,CAAqBd,UAArB,EAAiC;;AAE7BD,2BAAOyB,OAAP,CAAeC,SAAS;;AAEpB;;AAEA,4BAAIzB,WAAW0B,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAJ,EACIzB,WAAW4B,iBAAX,CAA6BH,KAA7B;;AAEJzB,mCAAW6B,iBAAX,CAA6BJ,KAA7B,EAAoC,EAAEK,eAAe,IAAjB,EAApC;AACH,qBARD;AASH;;AAED,uBAAOC,eAAP,GAAyB;AACrB,wBAAI/B,UAAJ,EAAgB;AACZ;AACAC;AACH;AACJ;;AA/D0B","file":"ConnectionFactory.js","sourcesContent":["// array com uma store apenas\nconst stores = ['negociacaoes'];\n// COMEÇA SEM CONEXÃO\nlet connection = null;\n// VARIÁVEL QUE ARMAZENARÁ A FUNÇÃO ORIGINAL\nlet close = null;\n\nexport class ConnectionFactory {\n\n    constructor() {\n        throw new Error('Não é possível criar instâncias dessa classe');\n    }\n\n    static getConnection() {\n        return new Promise((resolve, reject) => {\n\n            const openRequest = indexedDB.open('jscangaceiro', 2);\n\n            if (connection) return resolve(connection);\n\n            openRequest.onupgradeneeded = e => {\n\n                // PASSA A CONEXÃO PARA O MÉTODO\n                ConnectionFactory._createStores(e.target.result);\n\n            };\n\n            openRequest.onsuccess = e => {\n                // SÓ SERÁ EXECUTADO NA PRIMEIRA VEZ QUE A CONEXÃO FOR CRIADA\n                connection = e.target.result;\n\n                // GUARDANDO A FUNÇÃO ORIGINAL!\n                close = connection.close.bind(connection);\n\n                connection.close = () => {\n                    throw new Error('Você não pode fechar diretamente a conexão');\n                };\n                resolve(e.target.result)\n            };\n\n            openRequest.onerror = e => {\n                console.log(e.target.error)\n                reject(e.target.error.name)\n            };\n\n        });\n    }\n\n\n    // CONVENÇÃO DE MÉTODO PRIVADO\n    // SÓ FAZ SENTIDO SER CHAMADO PELA \n    // PRÓPRIA CLASSE\n    static _createStores(connection) {\n\n        stores.forEach(store => {\n\n            // if sem bloco, mais sucinto!\n\n            if (connection.objectStoreNames.contains(store))\n                connection.deleteObjectStore(store);\n\n            connection.createObjectStore(store, { autoIncrement: true });\n        });\n    }\n\n    static closeConnection() {\n        if (connection) {\n            // CHAMANDO O CLOSE ORIGINAL!\n            close();\n        }\n    }\n\n}"]}