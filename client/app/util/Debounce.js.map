{"version":3,"sources":["../../app-src/util/Debounce.js"],"names":["debounce","fn","milissegundos","timer","clearTimeout","setTimeout"],"mappings":";;;AAAA;;;;;;AAMO,aAASA,QAAT,CAAkBC,EAAlB,EAAsBC,aAAtB,EAAqC;;AAGxC;AACA,YAAIC,QAAQ,CAAZ;;AAEA,eAAO,MAAM;;AAET;AACAC,yBAAaD,KAAb;;AAEA;AACA;AACAA,oBAAQE,WAAW,MAAMJ,IAAjB,EAAuBC,aAAvB,CAAR;AACH,SARD;AASH;;wBAfeF,Q","file":"Debounce.js","sourcesContent":["/*\nVamos recapitular. Quando debounce for invocado, retornará uma nova função. É essa nova função que será associada ao evento \"click\" do botão. Quando o evento for disparado, a função parará qualquer timer que esteja em andamento e criará um novo timer.\nSe nenhuma outra ação for empreendida na janela de tempo de um segundo, a função passada como primeiro parâmetro de debounce será executada. Porém, se outro clique for realizado antes da janela de um segundo terminar, o temporizador vigente será cancelado e um novo tomará o seu lugar.\nPor fim, podemos utilizar a função debounce para qualquer evento em nossa aplicação que precise executar apenas uma ação dentro de uma janela de tempo.\n*/\n\nexport function debounce(fn, milissegundos) {\n\n\n    // guarda o ID de um timer, 0 indica que não há nenhum\n    let timer = 0;\n\n    return () => {\n\n        // para o último timer definido\n        clearTimeout(timer);\n\n        // a variável timer ganha o ID de um novo temporizador \n        // afeta a variável no escopo da função debounce\n        timer = setTimeout(() => fn(), milissegundos);\n    }\n}"]}